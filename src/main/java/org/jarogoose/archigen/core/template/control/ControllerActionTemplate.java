package org.jarogoose.archigen.core.template.control;

import java.io.File;
import org.jarogoose.archigen.core.Paths;
import org.jarogoose.archigen.core.template.ArcTemplate;
import org.jarogoose.archigen.web.config.domain.model.dto.Config;
import org.jarogoose.archigen.web.generate.domain.model.dto.Domain;

public final class ControllerActionTemplate implements ArcTemplate {

  public static final String TEMPLATE = """
      package {{project-path}}.feature.{{root-name}}.control;

      import {{project-path}}.event.Event;
      import {{project-path}}.feature.{{root-name}}.api.{{feature-name}}ActionFacade;
      import {{project-path}}.feature.{{root-name}}.domain.model.request.Add{{feature-name}}Request;
      import lombok.extern.slf4j.Slf4j;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;

      /**
       * {@link {{feature-name}}ActionController} handles POST PUT DELETE REST events.
       * <p>
       * Action controller is responsible for:
       * <li> read requests handling </li>
       * <li> read response handling </li>
       * <li> all levels exceptions handling </li>
       * <li> event recording </li>
       * <li> passing request to appropriate facade </li>
       *
       * @author Generated by {{author-name}}.
       */
      @Slf4j
      @RestController()
      @RequestMapping("{{rest-api}}/{{domain-uri}}-api/action")
      public class {{feature-name}}ActionController {

        private final {{feature-name}}ActionFacade facade;

        public {{feature-name}}ActionController({{feature-name}}ActionFacade facade) {
          this.facade = facade;
        }

        @Event
        @PostMapping("add-{{uri}}")
        public ResponseEntity<Object> add{{feature-name}}(
          @RequestBody Add{{feature-name}}Request request
        ) {
          try {
            // TODO Auto-generated method stub
            return ResponseEntity.ok(null);
          } catch (Exception e) {
            log.error("[{{feature-name-uppercase}}] something went wrong", e);
            return ResponseEntity.internalServerError().build();
          }
        }
      }

      """;

  private final Config config;
  private final Domain domain;

  public ControllerActionTemplate(Config config, Domain domain) {
    this.config = config;
    this.domain = domain;
  }

  @Override
  public String content() {
    String template = TEMPLATE;

    template = replaceAuthorName(template, config.author());
    template = replaceProjectPath(template, config.artefact(), config.project());
    template = replaceRootName(template, domain.root());
    template = replaceRestApi(template, domain.restApi());
    template = replaceDomainUri(template, domain.root());
    template = replaceUri(template, domain.feature());
    template = replaceFeatureName(template, domain.feature());
    template = replaceFeatureNameUppercase(template, domain.feature());

    return template;
  }

  @Override
  public File file() {
    return new File(
        Paths.CONTROLLER_PATH.get(
            config,
            domain.root(),
            domain.feature(),
            "ActionController",
            false));
  }
}
