package org.jarogoose.archigen.core.template.api;

import java.io.File;
import org.jarogoose.archigen.core.Paths;
import org.jarogoose.archigen.core.template.ArcTemplate;
import org.jarogoose.archigen.web.config.domain.model.dto.Config;
import org.jarogoose.archigen.web.generate.domain.model.dto.Domain;

public final class ServiceWriteTemplate implements ArcTemplate {

  public static final String TEMPLATE = """
  package {{project-path}}.feature.{{root-name}}.api;

  import {{project-path}}.feature.{{root-name}}.domain.exception.{{feature-name}}Exception;
  import {{project-path}}.feature.{{root-name}}.storage.{{feature-name}}Loader;
  import org.springframework.stereotype.Service;

  /**
   * {@link {{feature-name}}WriteService} executes feature business logic.
   * <p>
   * Write service is responsible for:
   * <li> executes algorithms for write operations </li>
   * <li> all methods are commands and does not return anything </li>
   * <li> groups and executes loader calls in order </li>
   * <li> logs business logic execution </li>
   *
   * @author Generated by {{author-name}}
   */
  @Service
  class {{feature-name}}WriteService {

    private final {{feature-name}}Loader {{feature-name}}Loader;

    private {{feature-name}}WriteService({{feature-name}}Loader {{feature-name}}Loader) {
      this.{{feature-name}}Loader = {{feature-name}}Loader;
    }

    public void add{{feature-name}}() {
      throw new {{feature-name}}Exception("Auto-generated method stub");
    }
  }

  """;

  private final Config config;
  private final Domain domain;

  public ServiceWriteTemplate(Config config, Domain domain) {
    this.config = config;
    this.domain = domain;
  }

  @Override
  public String content() {
    String template = TEMPLATE;

    template = replaceAuthorName(template, config.author());
    template =
      replaceProjectPath(template, config.artefact(), config.project());
    template = replaceRootName(template, domain.root());
    template = replaceFeatureName(template, domain.feature());
    template = replaceFeatureNameLowered(template, domain.feature());

    return template;
  }

  @Override
  public File file() {
    return new File(
      Paths.API_PATH.get(
        config,
        domain.root(),
        domain.feature(),
        "WriteService",
        false
      )
    );
  }
}
