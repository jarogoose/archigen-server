package org.jarogoose.archigen.service;

import static java.lang.String.format;
import static org.jarogoose.archigen.util.Commons.formatNotFoundExceptionImport;
import static org.jarogoose.archigen.util.Commons.formatRequestImport;
import static org.jarogoose.archigen.util.ImportContainerSingleton.imports;
import static org.jarogoose.archigen.util.Packages.CONTROLLER_PACKAGE;
import static org.jarogoose.archigen.util.Packages.ROOT_PACKAGE;
import static org.jarogoose.archigen.util.Replacer.API;
import static org.jarogoose.archigen.util.Replacer.DEPENDENCY;
import static org.jarogoose.archigen.util.Replacer.FEATURE;
import static org.jarogoose.archigen.util.Replacer.IMPORTS;
import static org.jarogoose.archigen.util.Replacer.PACKAGE;
import static org.jarogoose.archigen.util.StringUtils.splitByUpperCase;
import static org.springframework.util.StringUtils.capitalize;

import org.jarogoose.archigen.domain.Domain;
import org.jarogoose.archigen.domain.Request;
import org.jarogoose.archigen.util.Commons;
import org.jarogoose.archigen.util.ReturnType;
import org.jarogoose.archigen.util.StringUtils;

public class ControllerTemplate {

  private static final String TEMPLATE = """
      package {{package}};
      
      import com.jarogoose.enenbi.event.Event;
      {{imports}}
      import com.jarogoose.enenbi.rest.EnenbiController;
      import lombok.extern.slf4j.Slf4j;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.DeleteMapping;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.PutMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;
      
      @Slf4j
      @RestController()
      @RequestMapping("user-ui/{{domain-uri}}-api")
      public class {{feature-name}}Controller implements EnenbiController {
      
      {{dependency-block}}
      {{api-block}}
      }
      
      """;

  private static final String DEPENDENCY_BLOCK_TEMPLATE = """
        private final {{feature-name}}Facade facade;
      
        public {{feature-name}}Controller({{feature-name}}Facade facade) {
          this.facade = facade;
        }
      """;

  private static final String API_BLOCK_TEMPLATE = """
        @Event
        {{uri}}
        public ResponseEntity<Object> {{function-name}}({{controller-input}}) {
          // TODO Autogenerated
          try {
            {{facade-call}}(request);
            {{return-success}};
          } catch (Exception e) {
            return internalServerError();
          }
        }
      """;


  public String createTemplate(Domain domain) {
    String template = TEMPLATE;

    // domain uri
    String domainUri = domain.root();
    template = template.replace("{{domain-uri}}", domainUri);

    // controller class
    String packageName = String.format("%s.%s.%s", ROOT_PACKAGE, domain.root(), CONTROLLER_PACKAGE);
    template = template.replace(PACKAGE.toString(), packageName);
    template = template.replace(FEATURE.toString(), capitalize(domain.feature()));
    template = template.replace(DEPENDENCY.toString(), createDependencyBlock(domain));
    template = template.replace(API.toString(), createApiBlock(domain));
    template = template.replace(IMPORTS.toString(), imports().getControllerImports());

    return template;
  }

  public String createDependencyBlock(Domain domain) {
    String dependencyBlock = DEPENDENCY_BLOCK_TEMPLATE;

    // feature name
    String featureName = capitalize(domain.feature());
    dependencyBlock = dependencyBlock.replace(FEATURE.toString(), featureName);

    // facade import
    imports().addControllerImport(Commons.formatFacadeImport(domain));

    return dependencyBlock;
  }

  public String createApiBlock(Domain domain) {
    StringBuilder content = new StringBuilder();

    for (Request request : domain.requests()) {
      String apiBlock = API_BLOCK_TEMPLATE;

      // uri
      String httpMethod = capitalize(request.httpMethod().toLowerCase());
      String uri = format("@%sMapping(\"%s\")", httpMethod, formatUri(request.control()));
      apiBlock = apiBlock.replace("{{uri}}", uri);

      // function name
      String functionNme = format("%s", request.control());
      apiBlock = apiBlock.replace("{{function-name}}", functionNme);

      // controller input
      String controllerInput = format("@RequestBody %sRequest request", capitalize(request.control()));
      apiBlock = apiBlock.replace("{{controller-input}}", controllerInput);

      // request import
      imports().addControllerImport(formatRequestImport(domain, request));

      // facade call
      apiBlock = apiBlock.replace("{{facade-call}}", formatFacadeCall(domain, request));

      // return success
      apiBlock = apiBlock.replace("{{return-success}}", formatReturnSuccessCall(request.returnType()));

      // exception name
      apiBlock = apiBlock.replace(FEATURE.toString(), capitalize(domain.feature()));

      // import exception
      imports().addControllerImport(formatNotFoundExceptionImport(domain));

      content.append(apiBlock).append(System.lineSeparator());
    }

    content.deleteCharAt(content.length() - 1);

    return content.toString();
  }

  private String formatFacadeCall(Domain domain, Request request) {
    if (request.returnType().equalsIgnoreCase(ReturnType.VOID.name())) {
      return format("facade.%s", request.control());
    } else {
      return format("var response = facade.%s", request.control());
    }
  }

  private CharSequence formatReturnSuccessCall(String returnType) {
    if (returnType.equalsIgnoreCase(ReturnType.VOID.name())) {
      return "return ok(\"Success\")";
    } else {
      return "return ok(\"Success\", response)";
    }
  }

  private String formatUri(String feature) {
    String[] words = splitByUpperCase(feature);
    StringBuilder sb = new StringBuilder();
    for (String word : words) {
      sb.append(word.toLowerCase()).append("-");
    }
    sb.deleteCharAt(sb.length() - 1);
    return sb.toString();
  }
}
